/*Written by Monika Golla
 *This Java file is to generate assert statements for each predicate of the given program. That is for each predicate in the Condition_And_Predicates.txt file the corresponding metaFileOfPred-*.txt is generated by considering test cases in predicateResults*.txt respectively.
*Upon generating assert statements, replaced predicate(in Condition_And_Predicates.txt file) with the corresponding assert statements(in metaFileOfPred-*.txt) while iterating each line in the given c program(test14.c). Thus generated a meta c program(test14Meta.c) which contains assert statements before each predicate (if statements).
 */



import java.io.BufferedReader;
import java.io.FileNotFoundException;
import java.io.FileReader;
import java.io.IOException;
import java.io.PrintWriter;
import java.util.*; 

/**
 *
 * @author user
 */
public class MetaJavaFileGenerator{
    public static void main(String[] args) throws FileNotFoundException, IOException {

        BufferedReader PC=new BufferedReader(new FileReader("exp/Condition_And_Predicates.txt"));
        String r=PC.readLine();
        int no_of_pred=0;
	Map<String,String> mapPredicate=new HashMap<String,String>();
        
        while(r!=null){

	    String predicate = r;
	    String finalPredicateArray="";
            if(r.contains("&&")||r.contains("||")){

            	r=r.replace("&&", "~");
            	r=r.replace("||", "~");
	    	r=r.replace("(", "");
	    	r=r.replace(")", "");
            	String p[]=r.split("~");
            	no_of_pred++;
	    	BufferedReader PC1=new BufferedReader(new FileReader("exp/predicateResults"+no_of_pred+".txt"));
	    	PrintWriter out_cp_onlyvalue=new PrintWriter("exp/meta/metaFileOfPred-"+no_of_pred+".txt");
            
            	String r1=PC1.readLine();
	    	String tVal[] = null;
		
	    	for(int n1=0;n1<p.length;n1++){
			
			while(r1!=null){
				String finalPredicate = predicate;
	        		tVal=r1.split(",");
				
				for(int n2=0;n2<tVal.length;n2++){

					System.out.println(tVal[n2]);
					if(tVal[n2].equals("F")){

						System.out.println("!"+p[n2] + finalPredicate.contains(p[n2]));
                                		finalPredicate = finalPredicate.replace(p[n2],"!("+p[n2]+")");

					}else
						System.out.println(p[n2]);

				}

				finalPredicate = "__CPROVER_assert( "+finalPredicate+" );";
				finalPredicateArray = finalPredicateArray + "\n" +finalPredicate;	
				System.out.println("*********************"+finalPredicate);
				out_cp_onlyvalue.println(finalPredicate);
				out_cp_onlyvalue.flush();	
				tVal=null;

				r1=PC1.readLine();
	
			}
			
			

	    	}
	         
	    	System.out.println("*********************"+p.length);

            }
	    mapPredicate.put(predicate, finalPredicateArray);
            r=PC.readLine();

        }

	BufferedReader originalFile=new BufferedReader(new FileReader("test14.c"));
	String eachLine=originalFile.readLine();
        PrintWriter out_metaFile=new PrintWriter("exp/meta/test14Meta.c");
	System.out.println("*********************"+mapPredicate.size());

	while(eachLine!=null){
		
		for(String eachPredicate : mapPredicate.keySet()){

			if(eachLine.contains(eachPredicate)){

				eachLine=eachLine.replace(eachLine, mapPredicate.get(eachPredicate) +"\n" + eachLine);
			}
			
		}
		out_metaFile.println(eachLine);
		out_metaFile.flush();
		System.out.println("*********************"+eachLine);
		
		eachLine = originalFile.readLine();
	}
	
            
    }
}
